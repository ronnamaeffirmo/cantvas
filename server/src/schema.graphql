# import Teacher, Student, Score, Subject, Exam, Question, Choice from "./generated/prisma.graphql"
# import TeacherWhereInput, StudentWhereInput, ScoreWhereInput, AnswerWhereInput, SubjectWhereInput, ExamWhereInput, QuestionWhereInput, ChoiceWhereInput from "./generated/prisma.graphql"
# import TeacherWhereUniqueInput, StudentWhereUniqueInput, AnswerWhereUniqueInput, ScoreWhereUniqueInput, SubjectWhereUniqueInput, ExamWhereUniqueInput, QuestionWhereUniqueInput, ChoiceWhereUniqueInput  from "./generated/prisma.graphql"
# import TeacherCreateInput, StudentCreateInput, ScoreCreateInput, SubjectCreateInput, ExamCreateInput, QuestionCreateInput, ChoiceCreateInput from "./generated/prisma.graphql"
# import TeacherUpdateInput, StudentUpdateInput, ScoreUpdateInput, SubjectUpdateInput, ExamUpdateInput, QuestionUpdateInput, ChoiceUpdateInput from "./generated/prisma.graphql"
# import TeacherSubscriptionWhereInput, StudentSubscriptionWhereInput, ScoreSubscriptionWhereInput, SubjectSubscriptionWhereInput, ExamSubscriptionWhereInput, QuestionSubscriptionWhereInput, ChoiceSubscriptionWhereInput from "./generated/prisma.graphql"
# import TeacherSubscriptionPayload, StudentSubscriptionPayload, ScoreSubscriptionPayload, SubjectSubscriptionPayload, ExamSubscriptionPayload, QuestionSubscriptionPayload, ChoiceSubscriptionPayload from "./generated/prisma.graphql"

type Query {
	loggedInStudent: Student!
	loggedInTeacher: Teacher!
	scores(where: ScoreWhereInput): [Score]!
	students(where: StudentWhereInput): [Student]!
	answers(where: AnswerWhereInput): [Answer]!
	exams(where: ExamWhereInput): [Exam]!
	exam(where: ExamWhereUniqueInput): Exam!
	subjects(where: SubjectWhereInput): [Subject]!
}

type Mutation {
	updateLoggedInStudent(data: StudentUpdateInput!): Student
	createExam(data: ExamCreateInput!): Exam!
	updateExam(data: ExamUpdateInput!, where: ExamWhereUniqueInput!): Exam
	studentLogin(email: String!, password: String!): StudentAuthPayload
	teacherLogin(email: String!, password: String!): TeacherAuthPayload
	createTeacher(data: TeacherCreateInput!): TeacherAuthPayload!
	createStudent(data: StudentCreateInput!): StudentAuthPayload!
}

type Subscription {
	teacherSubscription(where: TeacherSubscriptionWhereInput): TeacherSubscriptionPayload
	studentSubscription(where: StudentSubscriptionWhereInput): StudentSubscriptionPayload
	scoreSubscription(where: ScoreSubscriptionWhereInput): ScoreSubscriptionPayload
	subjectSubscription(where: SubjectSubscriptionWhereInput): SubjectSubscriptionPayload
	examSubscription(where: ExamSubscriptionWhereInput): ExamSubscriptionPayload
	questionSubscription(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
	choiceSubscription(where: ChoiceSubscriptionWhereInput): ChoiceSubscriptionPayload
}

type StudentAuthPayload {
	token: String!
	student: Student!
}

type TeacherAuthPayload {
	token: String!
	teacher: Teacher!
}
