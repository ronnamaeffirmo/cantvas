# import Teacher, Student, Score, Subject, Exam, Question, Choice from "./generated/prisma.graphql"
# import TeacherWhereInput, StudentWhereInput, ScoreWhereInput, SubjectWhereInput, ExamWhereInput, QuestionWhereInput, ChoiceWhereInput from "./generated/prisma.graphql"
# import TeacherWhereUniqueInput, StudentWhereUniqueInput, ScoreWhereUniqueInput, SubjectWhereUniqueInput, ExamWhereUniqueInput, QuestionWhereUniqueInput, ChoiceWhereUniqueInput  from "./generated/prisma.graphql"
# import TeacherCreateInput, StudentCreateInput, ScoreCreateInput, SubjectCreateInput, ExamCreateInput, QuestionCreateInput, ChoiceCreateInput from "./generated/prisma.graphql"
# import TeacherUpdateInput, StudentUpdateInput, ScoreUpdateInput, SubjectUpdateInput, ExamUpdateInput, QuestionUpdateInput, ChoiceUpdateInput from "./generated/prisma.graphql"
# import TeacherSubscriptionWhereInput, StudentSubscriptionWhereInput, ScoreSubscriptionWhereInput, SubjectSubscriptionWhereInput, ExamSubscriptionWhereInput, QuestionSubscriptionWhereInput, ChoiceSubscriptionWhereInput from "./generated/prisma.graphql"
# import TeacherSubscriptionPayload, StudentSubscriptionPayload, ScoreSubscriptionPayload, SubjectSubscriptionPayload, ExamSubscriptionPayload, QuestionSubscriptionPayload, ChoiceSubscriptionPayload from "./generated/prisma.graphql"

type Query {
	teachers(where: TeacherWhereInput): [Teacher]!
	students(where: StudentWhereInput): [Student]!
	scores(where: ScoreWhereInput): [Score]!
	subjects(where: SubjectWhereInput): [Subject]!
	exams(where: ExamWhereInput): [Exam]!
	questions(where: QuestionWhereInput): [Question]!
	choices(where: ChoiceWhereInput): [Choice]!

	teacher(where: TeacherWhereUniqueInput): Teacher!
	student(where: StudentWhereUniqueInput): Student!
	score(where: ScoreWhereUniqueInput): Score!
	subject(where: SubjectWhereUniqueInput): Subject!
	exam(where: ExamWhereUniqueInput): Exam!
	question(where: QuestionWhereUniqueInput): Question!
	choice(where: ChoiceWhereUniqueInput): Choice!
}

type Mutation {
	createTeacher(data: TeacherCreateInput!): TeacherAuthPayload!
	createStudent(data: StudentCreateInput!): StudentAuthPayload!
	createScore(data: ScoreCreateInput!): Score!
	createSubject(data: SubjectCreateInput!): Subject!
	createExam(data: ExamCreateInput!): Exam!
	createQuestion(data: QuestionCreateInput!): Question!
	createChoice(data: ChoiceCreateInput!): Choice!

	updateTeacher(data: TeacherUpdateInput!, where: TeacherWhereUniqueInput!): Teacher
	updateStudent(data: StudentUpdateInput!, where: StudentWhereUniqueInput!): Student
	updateScore(data: ScoreUpdateInput!, where: ScoreWhereUniqueInput!): Score
	updateSubject(data: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject
	updateExam(data: ExamUpdateInput!, where: ExamWhereUniqueInput!): Exam
	updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
	updateChoice(data: ChoiceUpdateInput!, where: ChoiceWhereUniqueInput!): Choice

	deleteTeacher(where: TeacherWhereUniqueInput!): Teacher
	deleteStudent(where: StudentWhereUniqueInput!): Student
	deleteScore(where: ScoreWhereUniqueInput!): Score
	deleteSubject(where: SubjectWhereUniqueInput!): Subject
	deleteExam(where: ExamWhereUniqueInput!): Exam
	deleteQuestion(where: QuestionWhereUniqueInput!): Question
	deleteChoice(where: ChoiceWhereUniqueInput!): Choice

	studentLogin(email: String!, password: String!): StudentAuthPayload
	teacherLogin(email: String!, password: String!): TeacherAuthPayload
}

type Subscription {
	teacherSubscription(where: TeacherSubscriptionWhereInput): TeacherSubscriptionPayload
	studentSubscription(where: StudentSubscriptionWhereInput): StudentSubscriptionPayload
	scoreSubscription(where: ScoreSubscriptionWhereInput): ScoreSubscriptionPayload
	subjectSubscription(where: SubjectSubscriptionWhereInput): SubjectSubscriptionPayload
	examSubscription(where: ExamSubscriptionWhereInput): ExamSubscriptionPayload
	questionSubscription(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
	choiceSubscription(where: ChoiceSubscriptionWhereInput): ChoiceSubscriptionPayload
}

type StudentAuthPayload {
	token: String!
	student: Student!
}

type TeacherAuthPayload {
	token: String!
	teacher: Teacher!
}
